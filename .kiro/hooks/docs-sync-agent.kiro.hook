{
  "enabled": true,
  "name": "Documentation Synchronization Agent",
  "description": "Performs comprehensive documentation audit and update cycle to keep Fantasia4x architecture refactoring documentation current with actual codebase implementation",
  "version": "1",
  "when": {
    "type": "userTriggered",
    "patterns": [
      ".kiro/specs/architecture-refactoring/*.md",
      "src/lib/game/systems/*.ts",
      "src/lib/game/services/*.ts",
      "src/lib/game/core/*.ts"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "You are a documentation synchronization agent responsible for keeping the Fantasia4x architecture refactoring documentation current with the actual codebase implementation.\n\n## Your Task\nPerform a comprehensive documentation audit and update cycle:\n\n### Phase 1: Codebase Analysis\n1. **Scan the codebase** for implemented systems:\n   - Check `src/lib/game/systems/` for GameEngine, ServiceRegistry, ModifierSystem implementations\n   - Check `src/lib/game/services/` for service implementations (ItemService, BuildingService, etc.)\n   - Identify which services are fully implemented vs placeholders\n   - Check for remaining circular dependencies in `src/lib/game/core/`\n   - Verify TypeScript compilation status and any circular dependency warnings\n\n2. **Implementation Status Assessment**:\n   - Determine what's ✅ Fully Implemented\n   - Identify what's ⚠️ Partially Completed (with specifics)\n   - Note what's ❌ Not Started\n   - Check for new systems or services that may have been added\n\n### Phase 2: Requirements & Tasks Analysis\n1. **Review current tasks** in `.kiro/specs/architecture-refactoring/tasks.md`\n2. **Check requirements status** against actual implementation\n3. **Identify completed vs remaining work**\n4. **Note any new requirements or changed priorities**\n\n### Phase 3: Documentation Updates\nUpdate these documents in order, ensuring consistency:\n\n1. **`refactoring-priority-list.md`**:\n   - Update implementation status for each priority\n   - Move completed items to ✅ status\n   - Adjust priority order based on current needs\n   - Update success metrics with actual achievements\n\n2. **`requirements.md`**:\n   - Update each requirement's acceptance criteria with ✅ ⚠️ ❌ status\n   - Reflect actual implementation state\n   - Note which requirements are fully satisfied\n\n3. **`design.md`**:\n   - Update component implementation status\n   - Reflect actual architecture state\n   - Update migration phases to show completion status\n\n4. **`service-layer-interfaces.md`**:\n   - Verify interface definitions match actual implementations\n   - Update service status indicators\n   - Add any new services discovered in codebase\n\n5. **`gameengine-implementation-plan.md`**:\n   - Update phase completion status\n   - Add any new lessons learned\n   - Reflect current implementation state\n\n6. **`integration-interface-specifications.md`**:\n   - Verify interfaces match actual code\n   - Update implementation status indicators\n   - Add any new interfaces found\n\n### Phase 4: Glossary Update\nUpdate `glossary.md` to reflect:\n- Current implementation status summary\n- Any document structure changes\n- Updated navigation guidance\n- Current system status overview\n\n### Phase 5: Consistency Check\n- Ensure all status indicators are consistent across documents\n- Verify no contradictory information between documents\n- Check that all cross-references are valid\n- Ensure implementation status is accurately reflected everywhere\n\n### Phase 6: Commit Message Generation\nGenerate a commit message following this pattern:\n```\ndocs: streamline architecture refactoring documentation\n\n- Remove 9 redundant/obsolete documents to reduce maintenance burden\n- Update service-layer-interfaces.md to reflect actual implemented status\n- Convert gameengine-implementation-plan.md to implementation review\n- Update design.md and requirements.md with current implementation status\n- Maintain 8 focused, current documents with clear status indicators\n\nRemoved documents:\n- data-flow-analysis.md (covered by system-flow-diagram.md)\n- unified-calculation-system.md (implemented, covered in integration specs)\n- automated-modifier-system.md (implemented, covered in integration specs)\n- migration-guide.md (migration complete, remaining work in priority list)\n- system-interaction-protocols.md (implemented, covered in integration specs)\n- system-interaction-examples.md (examples outdated with GameEngine)\n- system-hierarchy-diagram.md (covered by system-flow-diagram.md)\n- service-integration.md (covered in integration-interface-specifications.md)\n- state-management-analysis.md (covered in system-flow-diagram.md and design.md)\n\nBenefits: 50% fewer docs to maintain, eliminated redundancy, current info only, clear navigation\n```"
  }
}